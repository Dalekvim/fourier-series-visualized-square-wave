{"version":3,"sources":["components/time.ts","components/wave.ts","components/frequency.ts","components/canvas.tsx","components/slider.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["time","wave","frequency","getFrequency","polar","radius","theta","x","Math","cos","y","sin","Canvas","value","setup","p5","canvasParentRef","createCanvas","parent","draw","angularVelocity","PI","background","translate","w","xPos","yPos","waveShift","i","xPrev","yPrev","n","stroke","noFill","ellipse","fill","line","length","pop","t","waveLength","beginShape","vertex","endShape","deltaTime","Slider","setValue","useState","updateFrequency","Form","Group","as","Row","Label","column","sm","Col","min","max","onChange","changeEvent","target","step","f","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0196284f.chunk.js","sourcesContent":["let time = 0;\n\nexport const getTime = () => {\n  return time;\n};\n\nexport const setTime = (t: number) => {\n  time = t;\n};\n","let wave: number[] = [];\n\nexport const getWave = () => {\n  return wave;\n};\n\nexport const setWave = (w: number[]) => {\n  wave = w;\n};\n","let frequency = 1;\n\nexport const getFrequency = () => {\n  return frequency;\n};\n\nexport const setFrequency = (f: number) => {\n  frequency = f;\n};\n","import Sketch from \"react-p5\";\nimport p5Types from \"p5\";\nimport { getTime, setTime } from \"./time\";\nimport { getWave, setWave } from \"./wave\";\nimport { getFrequency } from \"./frequency\";\n\nconst polar = (radius: number, theta: number) => {\n  const x = radius * Math.cos(theta);\n  const y = radius * Math.sin(theta);\n  return { x, y };\n};\n\ninterface Props {\n  value: number;\n}\n\nexport const Canvas: React.FC<Props> = ({ value }) => {\n  let wave = getWave();\n\n  let time = getTime();\n\n  const setup = (p5: p5Types, canvasParentRef: Element) => {\n    p5.createCanvas(600, 400).parent(canvasParentRef);\n  };\n\n  const draw = (p5: p5Types) => {\n    let frequency = getFrequency();\n    let angularVelocity = 2 * Math.PI * frequency;\n\n    p5.background(0);\n\n    p5.translate(100, 200);\n\n    let xPos = 0;\n    let yPos = 0;\n\n    let waveShift = 100;\n\n    for (let i = 0; i < value; i++) {\n      let xPrev = xPos;\n      let yPrev = yPos;\n\n      let n = 2 * i + 1;\n      let radius = (4 / (Math.PI * n)) * 50;\n      const { x, y } = polar(radius, n * angularVelocity * time);\n      xPos += x;\n      yPos += y;\n\n      // This part draws the Circles\n      p5.stroke(255, 100);\n      p5.noFill();\n      p5.ellipse(xPrev, yPrev, radius * 2);\n\n      p5.fill(255);\n      p5.stroke(255);\n      p5.line(xPrev, yPrev, xPos, yPos);\n      if (wave.length > 350) {\n        wave.pop();\n      }\n    }\n\n    setWave((wave = [yPos, ...wave]));\n\n    let waveLength = wave.length - 1;\n    p5.ellipse(waveLength + waveShift, wave[waveLength], 8);\n\n    p5.line(xPos, yPos, waveShift, wave[0]);\n    p5.ellipse(waveShift, wave[0], 8);\n\n    p5.beginShape();\n    p5.noFill();\n    for (let i = 1; i < wave.length; i++) {\n      p5.vertex(i + waveShift, wave[i]);\n    }\n    p5.endShape();\n\n    setTime((time -= p5.deltaTime / 1000));\n  };\n\n  return <Sketch setup={setup} draw={draw} />;\n};\n","import Col from \"react-bootstrap/esm/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport RangeSlider from \"react-bootstrap-range-slider\";\nimport { getFrequency, setFrequency } from \"./frequency\";\nimport { useState } from \"react\";\n\ninterface Props {\n  value: number;\n  setValue: (value: number) => void;\n}\n\nexport const Slider: React.FC<Props> = ({ value, setValue }) => {\n  const [frequency, updateFrequency] = useState(getFrequency());\n\n  return (\n    <Form>\n      <Form.Group as={Row}>\n        <Form.Label column sm=\"4\">\n          Terms:\n        </Form.Label>\n        <Col sm=\"8\">\n          <RangeSlider\n            min={1}\n            max={10}\n            value={value}\n            onChange={(changeEvent) =>\n              setValue((changeEvent.target.value as unknown) as number)\n            }\n          />\n        </Col>\n      </Form.Group>\n      <Form.Group as={Row}>\n        <Form.Label column sm=\"4\">\n          Frequency:\n        </Form.Label>\n        <Col sm=\"8\">\n          <RangeSlider\n            min={0.5}\n            max={2}\n            step={0.1}\n            value={frequency}\n            onChange={(changeEvent) => {\n              setFrequency((changeEvent.target.value as unknown) as number);\n              updateFrequency(getFrequency());\n            }}\n          />\n        </Col>\n      </Form.Group>\n    </Form>\n  );\n};\n","import { useState } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport { Canvas } from \"./components/canvas\";\nimport { Slider } from \"./components/slider\";\n\nexport const App: React.FC = () => {\n  const [value, setValue] = useState(1);\n\n  return (\n    <Container>\n      <h1>Fourier Series Visualized: Square Wave</h1>\n      <Canvas value={value} />\n      <Slider value={value} setValue={setValue} />\n    </Container>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}